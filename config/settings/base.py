"""
Django settings for opensooq project.

Generated by 'django-admin startproject' using Django 3.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import logging
import os
from pathlib import Path

import structlog

from apps.core.utils import logging_processors

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

# local apps
INSTALLED_APPS += [
    "apps.cars",
    "apps.contacts",
    "apps.teams",
]

# third part apps

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "opensooq.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR.parent / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "opensooq.wsgi.application"

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases
DATABASES = {
    "default": {
        "ENGINE": os.environ.get("POSTGRES_ENGINE"),
        "NAME": os.environ.get("POSTGRES_DB"),
        "USER": os.environ.get("POSTGRES_USER"),
        "PASSWORD": os.environ.get("POSTGRES_PASSWORD"),
        "HOST": os.environ.get("POSTGRES_HOST"),
        "PORT": os.environ.get("POSTGRES_PORT"),
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator", },
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator", },
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator", },
]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

# static
STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR.parent / 'collectstatic'
STATICFILES_DIRS = [BASE_DIR.parent / 'static', ]

# media
MEDIA_URL = "/media/"
MEDIA_DIR = BASE_DIR.parent / "media"
MEDIA_ROOT = MEDIA_DIR


PRE_CHAIN = [
    structlog.processors.TimeStamper(fmt="iso"),
    structlog.stdlib.add_logger_name,
    structlog.stdlib.add_log_level,
    structlog.processors.format_exc_info,
    logging_processors.merge_in_threadlocal_processor,
    logging_processors.SentryBreadcrumbJsonProcessor(level=logging.ERROR),
    structlog.processors.ExceptionPrettyPrinter(),
]
LOG_LEVEL = 'DEBUG'
# Logging
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "filters": {
        "require_debug_false": {"()": "django.utils.log.RequireDebugFalse"},
        "require_debug_true": {"()": "django.utils.log.RequireDebugTrue"},
    },
    "formatters": {
        "json_formatter": {
            "()": structlog.stdlib.ProcessorFormatter,
            "processor": structlog.processors.JSONRenderer(),
            "foreign_pre_chain": PRE_CHAIN,
        },
        "plain_console": {
            "()": structlog.stdlib.ProcessorFormatter,
            "processor": structlog.dev.ConsoleRenderer(),
            "foreign_pre_chain": PRE_CHAIN,
        },
    },
    "handlers": {
        "default": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
        },
        "null": {"class": "logging.NullHandler", "level": "DEBUG"},
    },
    "root": {"level": "WARNING", "handlers": ["default"]},
    "loggers": {
        "api": {"level": LOG_LEVEL, "propagate": False, "handlers": ["default"], },
        "cars": {"level": LOG_LEVEL, "propagate": False, "handlers": ["default"]},
        "contact": {"level": LOG_LEVEL, "propagate": False, "handlers": ["default"], },
        "core": {"level": LOG_LEVEL, "propagate": False, "handlers": ["default"], },
        "team": {"level": LOG_LEVEL, "propagate": False, "handlers": ["default"], },
        "django": {"level": "INFO", "propagate": False, "filters": ["require_debug_true"], "handlers": ["default"], },
        "django.request": {
            "level": "DEBUG",
            "propagate": False,
            "filters": ["require_debug_true"],
            "handlers": ["default"],
        },
        "django.db.backends": {
            "level": "ERROR",
            "handlers": ["default"],
            "filters": ["require_debug_true"],
            "propagate": False,
        },
        "django.security.DisallowedHost": {"handlers": ["null"], "propagate": False, },
        "parso": {"level": "WARNING"},
        "spyne": {"level": "ERROR"},
        "factory": {"level": "WARNING"},
        "faker": {"level": "WARNING"},
        "jsonmerge": {"level": "WARNING"},
        "pyexcel_io": {"level": "WARNING"},
        "pyexcel": {"level": "WARNING"},
        "lml": {"level": "WARNING"},
        "dicttoxml": {"level": "WARNING"},
        "botocore": {"level": "WARNING"},
    },
}

# db

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'
